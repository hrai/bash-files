#!/bin/bash
# NAME=$(git branch | grep '*' | sed 's/* //') 

#!/bin/bash
# Include any branches for which you wish to disable this script
if [ -z "$BRANCHES_TO_SKIP" ]; then
    BRANCHES_TO_SKIP=(master develop staging test)
fi

# Get the current branch name and check if it is excluded
BRANCH_NAME=$(git symbolic-ref --short HEAD)

# Remove 'feature/' from the branch name for branch names like
# feature/PEN-23 so the BRANCH_NAME will be 'PEN-23' only
BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/feature\///gI')
BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")

# Remove 'bugfix/' from the branch name for branch names like
# bugfix/PEN-23 so the BRANCH_NAME will be 'PEN-23' only
BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/bugfix\///gI')
BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")

# Trim it down to get the parts we're interested in
TRIMMED=$(echo $BRANCH_NAME | sed -e 's:^\([^-]*-[^-]*\)-.*:\1:' -e \
    'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/')

# Replace all the instances of the current branch name in the commit message - for amending commits
sed -i "s/$BRANCH_NAME\s/ /g" $1

# Delete BOTH leading and trailing whitespace from each line
sed -i 's/^[ \t]*//;s/[ \t]*$//' $1

# If it isn't excluded, prepend the trimmed branch identifier to the given message
if [ -n "$BRANCH_NAME" ] &&  ! [[ $BRANCH_EXCLUDED -eq 1 ]]; then
    sed -i.bak -e "1s/^/$TRIMMED /" $1
fi

# Capitalise the first letter of each word
sed -i "s/\( \|^\|-\)\(.\)/\1\u\2/g" $1
